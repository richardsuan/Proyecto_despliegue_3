name: Deploy API to AWS EC2

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Check if workflow is disabled
      id: check-disable
      run: |
        if [ "${{ secrets.DISABLE_WORKFLOW }}" == "true" ]; then
          echo "Workflow is disabled. Exiting."
          exit 0
        fi

    - name: Checkout repository
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Create ECR repository if it doesn't exist
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      run: |
        aws ecr describe-repositories --repository-names my-api || \
        aws ecr create-repository --repository-name my-api

    - name: Login to Amazon ECR
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      id: build-image
      run: |
        # Define variables
        IMAGE_TAG=latest
        REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-api

        # Build Docker image
        docker build -t $REPOSITORY_URI:$IMAGE_TAG .

        # Push Docker image to ECR
        docker push $REPOSITORY_URI:$IMAGE_TAG

    - name: Create SSH key file
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem

    - name: Get EC2 instance public IP
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      id: get-ip
      run: |
        # Reemplaza INSTANCE_ID con el ID de tu instancia existente
        INSTANCE_ID=i-0f33a32e5165f2ee0
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Wait for EC2 instance to be ready
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      run: |
        echo "Waiting for EC2 instance to be ready..."
        sleep 60  # Espera 60 segundos para dar tiempo a la instancia para estar lista

    - name: Install Docker and run container on EC2
      if: steps.check-disable.outputs.DISABLE_WORKFLOW != 'true'
      run: |
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@${{ env.PUBLIC_IP }} << EOF
          sudo apt-get update -y
          sudo apt-get install -y docker.io unzip
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install
          export PATH=$PATH:/usr/local/bin
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-api:latest
          sudo docker run -d -p 8001:8001 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-api:latest
        EOF

    - name: Output EC2 instance public IP
      run: |
        echo "Your service is available at: http://${{ env.PUBLIC_IP }}:8001"